{"version":3,"file":"static/js/562.8a4bd8cc.chunk.js","mappings":"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","sources":["components/Share/Share.js","components/Editor/SuccessAlert/SuccessAlert.js","components/Editor/TextDialog/TextDialogStyles.js","components/Editor/TextDialog/TextDialog.js","components/Editor/VideoPlayer/VideoPlayer.js"],"sourcesContent":["import {\r\n  EmailShareButton,\r\n  FacebookIcon,\r\n  FacebookShareButton,\r\n  LinkedinShareButton,\r\n  LinkedinIcon,\r\n  EmailIcon,\r\n} from \"react-share\";\r\n\r\nimport \"./share.css\";\r\n\r\n\r\n// The url that we passed as a prop to these buttons is just  youtube link \r\n// we first have to convert our video to a valid url so we can post it!\r\n\r\nfunction Share() {\r\n  return (\r\n    <div className=\"share-container\">\r\n      <div className=\"socials\">\r\n        <FacebookShareButton\r\n          className=\"facebook-button\"\r\n          url={\"https://youtu.be/N3AkSS5hXMA\"}\r\n          quote=\"hey bro\"\r\n          hashtag=\"#yt\"\r\n        >\r\n          <FacebookIcon\r\n            className=\"social-icon\"\r\n            size={\"35px\"}\r\n            round\r\n            iconFillColor={\"lightblue\"}\r\n          />\r\n        </FacebookShareButton>\r\n\r\n        <LinkedinShareButton\r\n          className=\"linkdein-button\"\r\n          url=\"https://youtu.be/N3AkSS5hXMA\"\r\n        >\r\n          <LinkedinIcon\r\n            className=\"social-icon\"\r\n            size={\"35px\"}\r\n            round\r\n            iconFillColor={\"lightblue\"}\r\n          />\r\n        </LinkedinShareButton>\r\n\r\n        <EmailShareButton\r\n          className=\"email-button\"\r\n          url=\"https://youtu.be/N3AkSS5hXMA\"\r\n        >\r\n          <EmailIcon\r\n            className=\"social-icon\"\r\n            size={\"35px\"}\r\n            round\r\n            bgStyle={{ fill: \"grey\" }}\r\n          />\r\n        </EmailShareButton>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Share;\r\n","import React, { useState } from \"react\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport Collapse from \"@mui/material/Collapse\";\r\nimport Alert from \"@mui/material/Alert\";\r\n\r\nfunction SuccessAlert() {\r\n  const [showAlert, setShowAlert] = useState(true);\r\n  return (\r\n    <div>\r\n      <Collapse in={showAlert}>\r\n        <Alert\r\n          action={\r\n            <IconButton\r\n              aria-label=\"close\"\r\n              size=\"small\"\r\n              onClick={() => {\r\n                setShowAlert(false);\r\n              }}\r\n            >\r\n              <CloseIcon fontSize=\"medium\" />\r\n            </IconButton>\r\n          }\r\n          sx={{ mb: 2 }}\r\n        >\r\n          trimmed ✔\r\n        </Alert>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SuccessAlert;\r\n","import { Box ,Button,styled} from \"@mui/material\";\r\n\r\nexport const DialogContainer = styled(Box)` \r\n    width: 500px;\r\n    max-width: 80%;\r\n    margin: 0 auto;\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 100%;\r\n    @media (max-width:650px){\r\n        max-width: 90%;\r\n    }\r\n`\r\n\r\nexport const TextButton = styled(Button)` \r\n    width: 30%;\r\n    display: block;\r\n    margin: 1em auto;\r\n    border-radius: 10px;\r\n    &:hover{\r\n        background-color: black;\r\n    }\r\n    @media (max-width:650px){\r\n        width: 70%;\r\n    }\r\n`","import * as React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport \"./TextDialog.css\";\r\nimport { DialogContainer, TextButton } from \"./TextDialogStyles\";\r\nimport { Context } from \"../../Context/Context\";\r\n\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n  \"& .MuiDialogContent-root\": {\r\n    padding: theme.spacing(2),\r\n  },\r\n  \"& .MuiDialogActions-root\": {\r\n    padding: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nfunction BootstrapDialogTitle(props) {\r\n  const { children, onClose, ...other } = props;\r\n\r\n  return (\r\n    <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n      {children}\r\n      {onClose ? (\r\n        <IconButton\r\n          aria-label=\"close\"\r\n          onClick={onClose}\r\n          sx={{\r\n            position: \"absolute\",\r\n            right: 8,\r\n            top: 8,\r\n            color: (theme) => theme.palette.grey[500],\r\n          }}\r\n        >\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </DialogTitle>\r\n  );\r\n}\r\n\r\nBootstrapDialogTitle.propTypes = {\r\n  children: PropTypes.node,\r\n  onClose: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default function TextDialog() {\r\n  const {\r\n    setTextStartTime,\r\n    setEndTextTime,\r\n    setSelect,\r\n    setRenderTextOnVideo,\r\n    textStartTime,\r\n    endTextTime,\r\n    renderTextOnVideo,\r\n    select,\r\n    handleAddText,\r\n    isOpen,\r\n    setIsOpen\r\n  } = React.useContext(Context);\r\n\r\n\r\n  const handleClose = () => {\r\n     setIsOpen(false)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <BootstrapDialog\r\n      onClose={handleClose}\r\n        aria-labelledby=\"customized-dialog-title\"\r\n        open={isOpen}\r\n      >\r\n        <DialogContainer>\r\n          <h3 className=\"heading\">Add text to your video</h3>\r\n\r\n          <div className=\"from-container\">\r\n            <label>From</label>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"00:00:00\"\r\n              value={textStartTime}\r\n              onChange={(e) => setTextStartTime(e.target.value)}\r\n              //   onChange={(e) => setVStart(e.target.value)}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"to-container\">\r\n            <label>To</label>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"00:00:00\"\r\n              value={endTextTime}\r\n              onChange={(e) => setEndTextTime(e.target.value)}\r\n              //   onChange={(e) => setVEnd(e.target.value)}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"select-container\">\r\n            <select value={select} onChange={(e) => setSelect(e.target.value)}>\r\n              <option value=\"x=(w-text_w)/2:y=h-th-10\">Bottom center</option>\r\n              <option value=\"x=w-tw-10:y=h-th-10\">Bottom right</option>\r\n              <option value=\"x=10:y=h-th-10\">Bottom left</option>\r\n              <option value=\"x=(w-text_w)/2:y=(h-text_h)/2\">Center</option>\r\n              <option value=\"x=(w-text_w)/2:y=100\">Top center</option>\r\n              <option value=\"x=w-tw-10:y=10\">Top right</option>\r\n              <option value=\"x=10:y=10\">Top left</option>\r\n            </select>\r\n          </div>\r\n\r\n          <div className=\"text-container\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Here goes the text..\"\r\n              value={renderTextOnVideo}\r\n              onChange={(e) => setRenderTextOnVideo(e.target.value)}\r\n            />\r\n          </div>\r\n\r\n          <TextButton\r\n          onClick={handleAddText}\r\n            color=\"success\"\r\n            variant=\"contained\"\r\n            className=\"add-text-btn\"\r\n          >\r\n            Add Text\r\n          </TextButton>\r\n        </DialogContainer>\r\n        <DialogActions>\r\n        </DialogActions>\r\n      </BootstrapDialog>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext, useState, useRef, useEffect } from \"react\";\r\nimport ReactPlayer from \"react-player\";\r\nimport { Context } from \"../../Context/Context\";\r\nimport Slider from \"rc-slider\";\r\nimport \"rc-slider/assets/index.css\";\r\nimport Alert from \"@mui/material/Alert\";\r\nimport Share from \"../../Share/Share\";\r\n\r\nimport {\r\n  VideoEditorContainer,\r\n  VideoContainer,\r\n  InviteButtonContainer,\r\n  PublishInviteButtonContainer,\r\n  PublishButtonContainer,\r\n  InviteText,\r\n  PublishText,\r\n  ModeContainer,\r\n  MoonIcon,\r\n  PauseIcons,\r\n  PlayIcon,\r\n  PlayPauseIconContainer,\r\n  SunIcon,\r\n  HelperButtonContainer,\r\n  TextButton,\r\n  MergeButton,\r\n  TrimButton,\r\n  ResetButton,\r\n  ButtonText,\r\n  SliderBox,\r\n  SliderContainer,\r\n  ChangeVideoButton,\r\n  MuteButton,\r\n} from \"./VideoPlayerStyle\";\r\nimport ShareIcon from \"@mui/icons-material/Share\";\r\nimport PersonAddAlt1Icon from \"@mui/icons-material/PersonAddAlt1\";\r\nimport ContentCutOutlinedIcon from \"@mui/icons-material/ContentCutOutlined\";\r\nimport PostAddOutlinedIcon from \"@mui/icons-material/PostAddOutlined\";\r\nimport TitleOutlinedIcon from \"@mui/icons-material/TitleOutlined\";\r\nimport RestartAltOutlinedIcon from \"@mui/icons-material/RestartAltOutlined\";\r\nimport OndemandVideoOutlinedIcon from \"@mui/icons-material/OndemandVideoOutlined\";\r\nimport VolumeOffIcon from \"@mui/icons-material/VolumeOff\";\r\nimport VolumeMuteIcon from \"@mui/icons-material/VolumeMute\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport \"../utils.css\";\r\nimport SuccessAlert from \"../SuccessAlert/SuccessAlert\";\r\nimport TextDialog from \"../TextDialog/TextDialog\";\r\n\r\nfunction VideoPlayer() {\r\n  const [sliderStartValue, setSliderStartValue] = useState(0);\r\n  const [sliderEndValue, setSliderEndValue] = useState(0);\r\n  const [videoDuration, setVideoDuration] = useState(0);\r\n  const [isMuted, setIsMuted] = useState(false);\r\n  const [toggleMergeBox, setToggleMergeBox] = useState(false);\r\n  const videoRef = useRef(null);\r\n  const trimmingRef = useRef(null);\r\n  const [isPublishButtonHovered, setIsPublishButtonHovered] = useState(false);\r\n\r\n  const {\r\n    theme,\r\n    setThemeMode,\r\n    choosenVideo,\r\n    handleTrim,\r\n    startValue,\r\n    setStartValue,\r\n    setEndValue,\r\n    isTrimmingDone,\r\n    setIsTrimmingDone,\r\n    isVideoPlaying,\r\n    setIsVideoPlaying,\r\n    setIsNotLoading,\r\n    setUserHasChoosenVideo,\r\n    isNotloading,\r\n    onChangeMergeVideo,\r\n    isMerged,\r\n    endValue,\r\n    setIsOpen,\r\n    isOpen,\r\n    setIsSliderMovedByUser,\r\n    isTrimButtonHovered,\r\n    setIsTrimButtonHovered,\r\n    isDisableTrimButton,\r\n    setIsDisableTrimButton,\r\n    isSliderMoving,\r\n    setIsSliderMoving,\r\n    showSuccessAlert,\r\n    setSuccesAlert,\r\n    showWarningAlert,\r\n    setShowWarningAlert,\r\n  } = useContext(Context);\r\n\r\n  const handleSliderValues = (sliderValuesArray) => {\r\n    setShowWarningAlert(false);\r\n    setSuccesAlert(true);\r\n    setIsSliderMoving(true);\r\n    setIsDisableTrimButton(false);\r\n    setIsSliderMovedByUser(true);\r\n    setIsVideoPlaying(false);\r\n    const [startingIndex, endingIndex] = sliderValuesArray;\r\n    setSliderStartValue(startingIndex);\r\n    setSliderEndValue(endingIndex);\r\n    // console.log(`${JSON.stringify(startingIndex.toFixed(2))}`);\r\n    setStartValue(startingIndex);\r\n    setEndValue(endingIndex);\r\n  };\r\n\r\n  const handlePlayClick = () => {\r\n    setIsVideoPlaying(true);\r\n  };\r\n\r\n  const handlePauseClick = () => {\r\n    setIsVideoPlaying(false);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setIsSliderMovedByUser(false);\r\n    setIsTrimmingDone(false);\r\n  };\r\n\r\n  const handleMute = () => {\r\n    setIsMuted(true);\r\n  };\r\n\r\n  const handleUnMute = () => {\r\n    setIsMuted(false);\r\n  };\r\n\r\n  const handleToggleText = () => {\r\n    setIsOpen((prevStat) => !prevStat);\r\n  };\r\n\r\n  const handleMergeBox = () => {\r\n    setToggleMergeBox((prevStat) => !prevStat);\r\n  };\r\n\r\n  const handleChangeVideo = () => {\r\n    setIsTrimmingDone(false);\r\n    setUserHasChoosenVideo(false);\r\n    setIsNotLoading(false);\r\n    setTimeout(() => {\r\n      setIsNotLoading(true);\r\n    }, 1000);\r\n  };\r\n\r\n  const handleMouseEnterPublish = (e) => {\r\n    e.stopPropagation();\r\n    setIsPublishButtonHovered(true);\r\n  };\r\n\r\n  const handlePublishClick = (e) => {\r\n    e.stopPropagation();\r\n    setIsPublishButtonHovered((prevState) => !prevState);\r\n  };\r\n\r\n  const handleMouseEntOnTrimButton = () => {\r\n    if (isDisableTrimButton) {\r\n      setSuccesAlert(false);\r\n      setShowWarningAlert(true);\r\n    } else {\r\n      setShowWarningAlert(false);\r\n      setSuccesAlert(true);\r\n    }\r\n    setIsTrimButtonHovered(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (videoRef.current) {\r\n      const duration = videoRef.current.getDuration() || 100;\r\n      setVideoDuration(duration);\r\n      videoRef.current.seekTo(startValue)\r\n      videoRef.current.seekTo(endValue);\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (isTrimmingDone && trimmingRef.current) {\r\n      const trimmedVideoDuration = trimmingRef.current.getDuration() || 100;\r\n      setVideoDuration(Math.round(Number(trimmedVideoDuration)));\r\n      trimmingRef.current.seekTo(startValue);\r\n    }\r\n  }, [isTrimmingDone, startValue, videoDuration]);\r\n\r\n\r\n  console.log(Math.round(Number(videoDuration)))\r\n\r\n  return (\r\n    <>\r\n      {isTrimmingDone ? <SuccessAlert /> : \"\"}\r\n      {isPublishButtonHovered && <Share />}\r\n      <VideoEditorContainer className={`${theme}-mode`}>\r\n        <PublishInviteButtonContainer>\r\n          <PublishButtonContainer\r\n            onMouseEnter={handleMouseEnterPublish}\r\n            onClick={handlePublishClick}\r\n          >\r\n            <ShareIcon fontSize=\"medium\" sx={{ color: \"#000000\" }} />\r\n            <PublishText sx={{ marginLeft: \"1em\" }} variant=\"body2\">\r\n              Publish\r\n            </PublishText>\r\n          </PublishButtonContainer>\r\n          <InviteButtonContainer>\r\n            <PersonAddAlt1Icon sx={{ color: \"#000000\" }} fontSize=\"medium\" />\r\n            <InviteText sx={{ marginLeft: \"1em\" }} variant=\"body2\">\r\n              Invite\r\n            </InviteText>\r\n          </InviteButtonContainer>\r\n          <ModeContainer onClick={setThemeMode}>\r\n            {theme === \"light\" ? (\r\n              <SunIcon\r\n                className=\"icons-fade\"\r\n                fontSize=\"large\"\r\n                sx={{ color: \"#FFC300\" }}\r\n              />\r\n            ) : (\r\n              <MoonIcon className=\"icons-fade\" fontSize=\"large\" />\r\n            )}\r\n          </ModeContainer>\r\n        </PublishInviteButtonContainer>\r\n\r\n        {isNotloading ? (\r\n          <VideoContainer>\r\n            {!isTrimmingDone ? (\r\n              <ReactPlayer\r\n              pip={true}\r\n                url={choosenVideo}\r\n                ref={videoRef}\r\n                width=\"100%\"\r\n                height={\"100%\"}\r\n                controls\r\n                playing={isVideoPlaying}\r\n                muted={isMuted}\r\n              />\r\n            ) : (\r\n              <ReactPlayer\r\n                url={choosenVideo}\r\n                ref={trimmingRef}\r\n                width=\"100%\"\r\n                height={\"100%\"}\r\n                controls\r\n                playing={isVideoPlaying}\r\n                muted={isMuted}\r\n              />\r\n            )}\r\n          </VideoContainer>\r\n        ) : (\r\n          <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n            <p className=\"processing-text-video\">Processing... </p>\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n              <CircularProgress\r\n                sx={{ marginLeft: \"5em\" }}\r\n                fontSize=\"large\"\r\n                color=\"primary\"\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {!isMerged && toggleMergeBox && (\r\n          <div className=\"merge-container\">\r\n            <Alert\r\n              className=\"alert-message\"\r\n              severity=\"info\"\r\n              sx={{ width: \"100%\" }}\r\n            >\r\n              Merge video ? <strong>choose a file 👇</strong>\r\n            </Alert>\r\n            <input\r\n              onChange={onChangeMergeVideo}\r\n              type=\"file\"\r\n              className=\"merge-file-input\"\r\n              id=\"up_file\"\r\n              name=\"merge\"\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        {isMerged && (\r\n          <div className=\"merge-container\">\r\n            <Alert\r\n              className=\"alert-message\"\r\n              severity=\"success\"\r\n              sx={{ width: \"100%\" }}\r\n            >\r\n              Video merged Successfully ✔!\r\n            </Alert>\r\n          </div>\r\n        )}\r\n\r\n        <HelperButtonContainer>\r\n          <ChangeVideoButton>\r\n            <OndemandVideoOutlinedIcon\r\n              onClick={handleChangeVideo}\r\n              fontSize=\"large\"\r\n              sx={{ color: \" #000000\" }}\r\n            />\r\n            <ButtonText variant=\"body2\">Change</ButtonText>\r\n          </ChangeVideoButton>\r\n\r\n          <MergeButton>\r\n            <PostAddOutlinedIcon\r\n              onClick={handleMergeBox}\r\n              fontSize=\"large\"\r\n              sx={{ color: \" #000000\" }}\r\n            />\r\n            <ButtonText variant=\"body2\">Merge</ButtonText>\r\n          </MergeButton>\r\n\r\n          <TextButton>\r\n            <TitleOutlinedIcon\r\n              onClick={handleToggleText}\r\n              fontSize=\"large\"\r\n              sx={{ color: \" #000000\" }}\r\n            />\r\n            <ButtonText variant=\"body2\">Text</ButtonText>\r\n          </TextButton>\r\n\r\n          <TrimButton\r\n            sx={{ opacity: isDisableTrimButton ? \".7\" : \"1\" }}\r\n            onMouseEnter={handleMouseEntOnTrimButton}\r\n          >\r\n            {(isSliderMoving || isTrimButtonHovered) && (\r\n              <div className=\"trim-button-alert\">\r\n                {showWarningAlert && (\r\n                  <div>\r\n                    <Alert\r\n                      className=\"alert-message\"\r\n                      severity=\"warning\"\r\n                      sx={{\r\n                        width: \"100%\",\r\n                        zIndex: \"1000\",\r\n                        position: \"relative\",\r\n                      }}\r\n                    >\r\n                      First Choose the timeframes from slider first to start\r\n                      trimming!\r\n                    </Alert>\r\n                  </div>\r\n                )}\r\n\r\n                {showSuccessAlert && (\r\n                  <div>\r\n                    <Alert\r\n                      className=\"alert-message\"\r\n                      severity=\"success\"\r\n                      sx={{\r\n                        width: \"100%\",\r\n                        zIndex: \"1000\",\r\n                        position: \"relative\",\r\n                      }}\r\n                    >\r\n                      You can now trim it!\r\n                    </Alert>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )}\r\n            <ContentCutOutlinedIcon\r\n              onClick={handleTrim}\r\n              fontSize=\"large\"\r\n              sx={{ color: \" #000000\" }}\r\n            />\r\n            <ButtonText variant=\"body2\">Trim</ButtonText>\r\n          </TrimButton>\r\n\r\n          <ResetButton>\r\n            <RestartAltOutlinedIcon\r\n              onClick={handleReset}\r\n              fontSize=\"large\"\r\n              sx={{ color: \" #000000\" }}\r\n            />\r\n            <ButtonText variant=\"body2\">Reset</ButtonText>\r\n          </ResetButton>\r\n\r\n          <MuteButton>\r\n            {!isMuted ? (\r\n              <VolumeMuteIcon\r\n                onClick={handleMute}\r\n                fontSize=\"large\"\r\n                sx={{ color: \" #000000\" }}\r\n              />\r\n            ) : (\r\n              <VolumeOffIcon\r\n                onClick={handleUnMute}\r\n                fontSize=\"large\"\r\n                sx={{ color: \" #000000\" }}\r\n              />\r\n            )}\r\n            <ButtonText variant=\"body2\">\r\n              {!isMuted ? \"Mute\" : \"Unmute\"}\r\n            </ButtonText>\r\n          </MuteButton>\r\n        </HelperButtonContainer>\r\n\r\n        {isOpen && <TextDialog />}\r\n\r\n        <div>\r\n          {!isTrimmingDone ? (\r\n            <div className=\"original-video-seconds-container\">\r\n              <p className=\"title\">Original Video</p>\r\n              <span className=\"time\">{`00:${JSON.stringify(startValue).slice(\r\n                0,\r\n                3\r\n              )}`}</span>\r\n              <span>-</span>\r\n              <span className=\"time\">{`00:${JSON.stringify(endValue).slice(\r\n                0,\r\n                3\r\n              )}`}</span>\r\n            </div>\r\n          ) : (\r\n            <div className=\"trimmed-video-seconds-container\">\r\n              <p className=\"title\">Trimmed Video</p>\r\n              <span className=\"time\">{`00:${JSON.stringify(\r\n                sliderStartValue\r\n              ).slice(0, 3)}`}</span>\r\n              <span>-</span>\r\n              <span className=\"time\">{`00:${JSON.stringify(\r\n                sliderEndValue\r\n              ).slice(0, 3)}`}</span>\r\n              <span className=\"calculate-trim-seconds\">\r\n                (00:{sliderEndValue - sliderStartValue} seconds)\r\n              </span>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <SliderContainer>\r\n          <PlayPauseIconContainer>\r\n            {!isVideoPlaying ? (\r\n              <PlayIcon\r\n                onClick={handlePlayClick}\r\n                fontSize=\"large\"\r\n                sx={{ color: \"#914979\" }}\r\n              />\r\n            ) : (\r\n              <PauseIcons\r\n                onClick={handlePauseClick}\r\n                fontSize=\"large\"\r\n                sx={{ color: \"#914979\" }}\r\n              />\r\n            )}\r\n          </PlayPauseIconContainer>\r\n          <SliderBox>\r\n            {!isTrimmingDone ? (\r\n              <Slider\r\n              // style={{width: `${videoDuration}px`}}\r\n              // reverse={true}\r\n                ariaLabelledByForHandle={() => \"range\"}\r\n                autoFocus={true}\r\n                range\r\n                defaultValue={[0, 100]}\r\n                min={videoDuration / 100}\r\n                max={videoDuration}\r\n                onChange={handleSliderValues}\r\n                // onAfterChange = {handleAfterChangeValues}\r\n                draggableTrack\r\n                keyboard={true}\r\n                pushable\r\n                allowCross={true}\r\n                activeDotStyle={[{ background: \"blue\" }]}\r\n                trackStyle={[\r\n                  {\r\n                    backgroundImage: \"linear-gradient(#DBDEF5,blue)\",\r\n                    height: \"10px\",\r\n                  },\r\n                ]}\r\n                railStyle={{ backgroundColor: \"#DBE0F5\", height: \"10px\" }}\r\n              />\r\n            ) : (\r\n              <Slider\r\n              // reverse={true}\r\n              // style={{width: `${videoDuration}px`}}\r\n                ariaLabelledByForHandle={() => \"range\"}\r\n                autoFocus={true}\r\n                range\r\n                defaultValue={[0, 100]}\r\n                min={videoDuration / 100}\r\n                max={videoDuration}\r\n                onChange={handleSliderValues}\r\n                draggableTrack\r\n                keyboard={true}\r\n                pushable\r\n                allowCross={true}\r\n                activeDotStyle={[{ background: \"blue\" }]}\r\n                trackStyle={[\r\n                  {\r\n                    background: \"linear-gradient(#DBDEF5,blue)\",\r\n                    height: \"10px\",\r\n                  },\r\n                ]}\r\n                railStyle={{ backgroundColor: \"#DBE0F5\", height: \"10px\" }}\r\n              />\r\n            )}\r\n          </SliderBox>\r\n        </SliderContainer>\r\n      </VideoEditorContainer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default VideoPlayer;\r\n"],"names":["className","FacebookShareButton","url","quote","hashtag","FacebookIcon","size","round","iconFillColor","LinkedinShareButton","LinkedinIcon","EmailShareButton","EmailIcon","bgStyle","fill","useState","showAlert","setShowAlert","Collapse","in","Alert","action","onClick","Close","fontSize","sx","mb","DialogContainer","styled","Box","TextButton","Button","BootstrapDialog","Dialog","theme","padding","spacing","TextDialog","React","Context","setTextStartTime","setEndTextTime","setSelect","setRenderTextOnVideo","textStartTime","endTextTime","renderTextOnVideo","select","handleAddText","isOpen","setIsOpen","onClose","open","type","placeholder","value","onChange","e","target","color","variant","DialogActions","sliderStartValue","setSliderStartValue","sliderEndValue","setSliderEndValue","videoDuration","setVideoDuration","isMuted","setIsMuted","toggleMergeBox","setToggleMergeBox","videoRef","useRef","trimmingRef","isPublishButtonHovered","setIsPublishButtonHovered","useContext","setThemeMode","choosenVideo","handleTrim","startValue","setStartValue","setEndValue","isTrimmingDone","setIsTrimmingDone","isVideoPlaying","setIsVideoPlaying","setIsNotLoading","setUserHasChoosenVideo","isNotloading","onChangeMergeVideo","isMerged","endValue","setIsSliderMovedByUser","isTrimButtonHovered","setIsTrimButtonHovered","isDisableTrimButton","setIsDisableTrimButton","isSliderMoving","setIsSliderMoving","showSuccessAlert","setSuccesAlert","showWarningAlert","setShowWarningAlert","handleSliderValues","sliderValuesArray","startingIndex","endingIndex","useEffect","current","duration","getDuration","seekTo","trimmedVideoDuration","Math","Number","console","log","onMouseEnter","stopPropagation","prevState","marginLeft","PersonAddAlt1","ref","width","height","controls","playing","muted","pip","style","display","flexDirection","justifyContent","CircularProgress","severity","id","name","OndemandVideoOutlined","setTimeout","PostAddOutlined","prevStat","TitleOutlined","opacity","zIndex","position","ContentCutOutlined","RestartAltOutlined","VolumeOff","VolumeMute","JSON","stringify","slice","ariaLabelledByForHandle","autoFocus","range","defaultValue","min","max","draggableTrack","keyboard","pushable","allowCross","activeDotStyle","background","trackStyle","railStyle","backgroundColor","backgroundImage"],"sourceRoot":""}